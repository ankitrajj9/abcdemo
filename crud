form:


<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="/tlds/abcdecriptor" prefix="abc"%> 

<head>
 <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js" type="text/javascript"></script>
<!-- <script>  
var request;  
function sendInfo(obj){  
var email=obj.value;
var url="ajaxcall?email="+email;  
  
if(window.XMLHttpRequest){  
request=new XMLHttpRequest();  
}  
else if(window.ActiveXObject){  
request=new ActiveXObject("Microsoft.XMLHTTP");  
}  
try{  
request.onreadystatechange=getInfo;  
request.open("GET",url,true);  
request.send();  
}catch(e){alert("Unable to connect to server");}  
}  
  
function getInfo(){  
if(request.readyState==4){  
var val=request.responseText;  
document.getElementById('mylocation').innerHTML=val;  
}  
}  
  
</script>   -->



<script>
function sendInfo(obj){
	
	 var txtemail = obj.value;
	 /* alert(txtemail); */
	 
	 var duplicate="";
	 <abc:ajax method="get" aysnc="false" ajaxurl="ajaxcall" isdirectoutput="true" jsvars="txtemail=txtemail" jsvartosetval="duplicate" />
		
	 $("#mylocation").text(duplicate);  
	/*  document.getElementById("mylocation").innerHTML=duplicate; */
		
		}




</script>


</head>  

<h1>Add New Student</h1>
<form:form method="post" action="save" modelAttribute="student" name="vinform">
	<table>
	<tr>
		<abc:hidden tagid="id" jsrequired="false" value="${student.hdid}" />
	</tr>
		<tr>
			<td>Name :</td>
			<td><abc:text tagid="name" value="${student.txtname}"/></td>
			
		</tr>
		<tr>
			<td>Email :</td>
			<td><abc:text tagid="email" value="${student.txtemail}" onblur="sendInfo(this)"/><p id="mylocation"></p></td>
		</tr>
		
		<tr>
			<td>Gender</td>
             <td>
			<abc:radio checkedVal="${student.rdgender}" tagid="gender" items="${genderlist}" jsrequired="false"/>
 		</td>
		
		</tr>
		
		<tr>
		<td>Hobby</td>
			<td><abc:checkbox jsrequired="false" tagid="hobby" items="${hobbylist}" checkedVal="${student.chkhobby}">
	</abc:checkbox></td>
		
		</tr>
		
		
		
		<tr><td>City</td>
	<td>	<abc:select tagid="city" items="${cityList}" jsrequired="true" selected="${student.selcity}"/></td>
		</tr>
		
		
		</td>
		</tr>
		<tr><td>Address</td>
		<td><abc:textarea rows="3" cols="15" tagid="address"></abc:textarea></td>
		</tr>
		
		
		<%-- <tr>
			<td>Hobbies:</td>
			<td><c:forEach items="${listhobb}" var="hobby">
					<form:checkbox path="hobbies" value="${hobby.sportname}" />${hobby.sportname}
			</c:forEach></td>
		</tr>
		<tr>
			<td>Skills:</td>
			<td><form:select path="skills" multiple="true">
					<c:forEach items="${listskills}" var="skill">
		 <form:option value="${skill.skillname}" label="${skill.skillname}"/>
		 </c:forEach>
				</form:select></td>
		</tr>
		<tr>
			<td>Address:</td>
			<td><form:textarea path="address" /></td>
		</tr>

		<tr>
			<td>City :</td>
			<td><form:select path="city">
					<form:option value="AHMEDABAD" label="AHMEDABAD" />
					<form:option value="RAJKOT" label="RAJKOT" />
					<form:option value="VADODARA" label="VADODARA" />
					<form:option value="MAHESANA" label="MAHESANA" />
				</form:select></td>
		</tr> --%>
		
		<tr>
			<td></td>
			<td><input type="submit" value="Save" /> <input type="reset"
				value="Reset"></td>
		</tr>
	</table>
</form:form>

.
___________________________
package com.ankit.controller;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ankit.service.StudentService;
import com.utility.SelectItem;

import com.ankit.entity.Student;

@Controller
public class StudentController {
	@Autowired
	private StudentService studentService;

	/*@RequestMapping(value = "/studform", method = RequestMethod.GET)
	public String addEmployee(Model m) {
		Student s = new Student();
		
		List<Hobby> hobbies = new ArrayList<Hobby>();
		Hobby h = new Hobby();
		h.setSportname("Basket ball");
		hobbies.add(new Hobby("Cricket"));
		hobbies.add(new Hobby("Football"));
		hobbies.add(new Hobby("Volleyball"));
		hobbies.add(h);
		s.setHobbies(hobbies);
		
		List<Skill> skills = new ArrayList<Skill>();
		skills.add(new Skill("Java"));
		skills.add(new Skill("C++"));
		skills.add(new Skill("PHP"));
		skills.add(new Skill("Android"));
		s.setSkills(skills);
		
		m.addAttribute("listskills", skills);
		m.addAttribute("listhobb", hobbies);
		m.addAttribute("command", s);
		// m.addAttribute("command", new Hobby());
		return "studform";
	}*/
	@RequestMapping(value = "studform",method = RequestMethod.GET)
	public String addEmployee(Model m){
		/*List<Hobby> hobbies = new ArrayList<Hobby>();
		Hobby h = new Hobby();
		h.setSportname("Basket ball");
		hobbies.add(new Hobby("Cricket"));
		hobbies.add(new Hobby("Football"));
		hobbies.add(new Hobby("Volleyball"));
		hobbies.add(h);
		student.setChkhobbies(hobbies);*/
		
		/*List<Skill> skills = new ArrayList<Skill>();
		skills.add(new Skill("Java"));
		skills.add(new Skill("C++"));
		skills.add(new Skill("PHP"));
		skills.add(new Skill("Android"));
		student.setSelskills(skills);*/
		
		/*m.addAttribute("listskills", skills);
		m.addAttribute("listhobb", hobbies);*/
		
		List<SelectItem> gender=new ArrayList<>();
		gender.add(new SelectItem("Male","Male"));
		gender.add(new SelectItem("Female","Female"));
		
		List<SelectItem> hobbies=new ArrayList<>();
		hobbies.add(new SelectItem("Cricket","Cricket"));
		hobbies.add(new SelectItem("BasketBall","BasketBall"));
		hobbies.add(new SelectItem("FootBall","FootBall"));
		hobbies.add(new SelectItem("VolleyBall","VolleyBall"));
		
		List<SelectItem> cities=new ArrayList<>();
		cities.add(new SelectItem("Ahmedabad","Ahmedabad"));
		cities.add(new SelectItem("Rajkot","Rajkot"));
		cities.add(new SelectItem("Vadodara","Vadodara"));
		cities.add(new SelectItem("Mahesana","Mahesana"));
		
		m.addAttribute("student",new Student());
		m.addAttribute("genderlist",gender);
		m.addAttribute("hobbylist",hobbies);
		m.addAttribute("cityList",cities);
		return "studform";
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String saveEmployee(@ModelAttribute("stud") Student student) {
		
		studentService.addStudent(student);
		
		
		
		return "redirect:/viewstudent";
	}

	@RequestMapping(value = "/viewstudent")
	public String viewemp(Model m) {
		List<Student> stu = studentService.listStudents();
		/*for(Student s:stu)
		{
			List<Skill> skill=studentService.getSkills(s.getId());
			s.setSkills(skill);
		}*/
		m.addAttribute("list", stu);
		return "viewstudent";
	}

	@RequestMapping(value = "/deletestud/{hdid}", method = RequestMethod.GET)
	public String remove(@PathVariable int hdid) {
		studentService.deleteStudent(hdid);
		return "redirect:/viewstudent";
	}

	@RequestMapping(value = "/editstud/{hdid}")
	public String editEmployee(@PathVariable int hdid, Model m) {
		Student s = studentService.getStudent(hdid);
		/*List<Hobby> lq = new ArrayList<Hobby>();
		Hobby h = new Hobby();
		h.setSportname("Basket ball");
		lq.add(new Hobby("Cricket"));
		lq.add(new Hobby("Football"));
		lq.add(new Hobby("Volleyball"));
		lq.add(h);*/
		/*System.out.println("PRINTING LIST OF HOBBIES");*/
		
		/*List<Skill> lp = new ArrayList<Skill>();
		lp.add(new Skill("Java"));
		lp.add(new Skill("C++"));
		lp.add(new Skill("PHP"));
		lp.add(new Skill("Android"));*/

		/*List<Hobby> l = studentService.getHobbies(id);
		List<Skill> sm = studentService.getSkills(id);
		*/
		/*s.setChkhobbies(l);
		s.setSelskills(sm);*/
		

		/*
		m.addAttribute("lr", lq);
		m.addAttribute("lm",lp);*/
		List<SelectItem> gender=new ArrayList<>();
		gender.add(new SelectItem("Male","Male"));
		gender.add(new SelectItem("Female","Female"));
		
		List<SelectItem> hobbies=new ArrayList<>();
		hobbies.add(new SelectItem("Cricket","Cricket"));
		hobbies.add(new SelectItem("BasketBall","BasketBall"));
		hobbies.add(new SelectItem("FootBall","FootBall"));
		hobbies.add(new SelectItem("VolleyBall","VolleyBall"));
		
		List<SelectItem> cities=new ArrayList<>();
		cities.add(new SelectItem("Ahmedabad","Ahmedabad"));
		cities.add(new SelectItem("Rajkot","Rajkot"));
		cities.add(new SelectItem("Vadodara","Vadodara"));
		cities.add(new SelectItem("Mahesana","Mahesana"));
		
		m.addAttribute("genderlist",gender);
		m.addAttribute("hobbylist",hobbies);
		m.addAttribute("cityList",cities);
		m.addAttribute("student", s);
		
		
		
		
		return "studeditform";
	}

	@RequestMapping(value = "/editsave", method = RequestMethod.POST)
	public String editsave(@ModelAttribute("stud") Student student) {
		studentService.updateStudent(student);
		return "redirect:/viewstudent";
	}

	@RequestMapping(value = "/test")
	public String test(@ModelAttribute Student s, Model m) {
		List<Student> l = studentService.listStudents();
		m.addAttribute("lis", l);
		return "testfile";
	}
	@RequestMapping(value="login", method=RequestMethod.GET)
	public String login(Model m){
		Student s = new Student();
		
		m.addAttribute("command", s);
		return "login";
	}
	/*@RequestMapping(value="login", method=RequestMethod.POST)
	public String loginVerify(@RequestParam("email")String email,Model m,HttpServletRequest request){
		
		//String e = student.getEmail();
		List<Student> s =studentService.findStudent(email);
		
		HttpSession httpSession = request.getSession();
		httpSession.setAttribute("student", s);
		m.addAttribute("studdetail", s);
		return "view2";
	}*/
	/*@RequestMapping(value = "/logout")
    public String logout(HttpServletRequest request) {
        System.out.println("logout() success");
        HttpSession httpSession = request.getSession();
        httpSession.invalidate();
        return "redirect:login";
    }*/
	
	/*@ResponseBody
	@RequestMapping(value="ajaxcall")
	public String makeAjax(HttpServletRequest request,HttpServletResponse response){
		String s = request.getParameter("email");
		Integer i = studentService.checkEmail(s);
		return i == 0 ? "Valid" : "Not valid";
	}*/
	
	@ResponseBody
	@RequestMapping(value="ajaxcall")
	public String makeAjax(HttpServletRequest request,HttpServletResponse response){
		String s = request.getParameter("txtemail");
		Integer i = studentService.checkEmail(s);
		return i == 0 ? "Valid" : "Not valid";
	}
	

}
_____________________________

<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="/tlds/abcdecriptor" prefix="abc"%> 

<h1>Students List</h1>
<table border="2" width="70%" cellpadding="2">
	<tr>
		<th>Id</th>
		<th>Name</th>
		<th>Email</th>
		<th>Gender</th>
		<th>Hobby</th>
		<th>City</th>
		<th>Address</th>
	</tr>
	<c:forEach var="stud" items="${list}">
		<tr>
			<td>${stud.hdid}</td>
			<td>${stud.txtname}</td>
			<td>${stud.txtemail}</td>
			<td>${stud.rdgender}</td>
		    <td>${stud.chkhobby}</td>
		    <td>${stud.selcity}</td>
		    <td>${stud.txtaaddress}</td>
			<td><a href="editstud/${stud.hdid}">Edit</a></td>
			<td><a href="deletestud/${stud.hdid}">Delete</a></td>
		</tr>
	</c:forEach>
</table>

<br />
<a href="studform">Add New Student</a>


<%-- <abc:href href="studform" label="Add new Student"></abc:href> --%>
<!-- <a href="test">Test data</a> -->

_____________________________________
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="/tlds/abcdecriptor" prefix="abc"%> 
<%@ page import="java.util.*" %>

<h1>Add New Student</h1>
<form:form method="post" action="/ABC_CRUD/editsave" modelAttribute="student">
	<table>
	<tr>
		<abc:hidden tagid="id" jsrequired="false" value="${student.hdid}" />
	</tr>
		<tr>
			<td>Name :</td>
			<td><abc:text tagid="name" value="${student.txtname}" /></td>
		</tr>
		
		<%-- <%
		out.print("Name:"+"<abc:text tagid='name'/>");
		
		%> --%>
		
		
		<tr>
			<td>Email :</td>
			<td><abc:text tagid="email" value="${student.txtemail}"/></td>
		</tr>
		<tr>
			<td>Gender</td>
             <td>
			<abc:radio checkedVal="${student.rdgender}" tagid="gender" items="${genderlist}" jsrequired="false"/>
 		</td>
		
		</tr>
		
		<tr>
		<td>Hobby</td>
			<td><abc:checkbox jsrequired="false" tagid="hobby" items="${hobbylist}" checkedVal="${student.chkhobby}">
	</abc:checkbox></td>
		</tr>
		
		<%-- <%
		List l = new ArrayList();
		l.add("India");
		l.add("USA");
		l.add("China");
		l.add("Japan");
		l.add("England");
		out.println("The Length of List is: ");
		int i=l.size();
		out.println(i);
		
		%> --%>
		
		
		<%-- <tr>
		<td>Hobby</td>
		<td>
		<abc:checkbox jsrequired="false" tagid="hobby" items="${hobbylist}" <c:if test="${hobbylist(0).label eq student.chkhobby}"> <c:out checked/> </c:if></abc:checkbox>
		</td>
		</tr> --%>
		<%-- <%
		/* int m = 0;
		if(i==0){
			out.print("<tr>Hobby</tr>");		
		}
		else{
			out.print("<tr>Skil</tr>");
		} */
		out.print("<tr>Skilllllll</tr>");
		 /* out.print("<td><abc:checkbox jsrequired='false' tagid='hobby' items=" + ${hobbylist} + " checkedVal="+${student.chkhobby}+ "></abc:checkbox></td>"); */
		 out.print("<abc:text tagid='name' value='${student.txtname}'/>");
		%>
		 --%>
		<tr><td>City</td>
	<td>	<abc:select tagid="city" items="${cityList}" jsrequired="true" selected="${student.selcity}"/></td>
		</tr>
		<tr>
		<td>Address</td>
		<td> <abc:textarea rows="3" cols="15" tagid="address" value="${student.txtaaddress}"></abc:textarea> </td>
		</tr>
		
		
		
		<%-- <tr>
			<td>Hobbies:</td>
			<td><c:forEach items="${listhobb}" var="hobby">
					<form:checkbox path="hobbies" value="${hobby.sportname}" />${hobby.sportname}
			</c:forEach></td>
		</tr>
		<tr>
			<td>Skills:</td>
			<td><form:select path="skills" multiple="true">
					<c:forEach items="${listskills}" var="skill">
		 <form:option value="${skill.skillname}" label="${skill.skillname}"/>
		 </c:forEach>
				</form:select></td>
		</tr>
		<tr>
			<td>Address:</td>
			<td><form:textarea path="address" /></td>
		</tr>

		<tr>
			<td>City :</td>
			<td><form:select path="city">
					<form:option value="AHMEDABAD" label="AHMEDABAD" />
					<form:option value="RAJKOT" label="RAJKOT" />
					<form:option value="VADODARA" label="VADODARA" />
					<form:option value="MAHESANA" label="MAHESANA" />
				</form:select></td>
		</tr> --%>
		<tr>
			<td></td>
			<td><input type="submit" value="editsave" /> <input type="reset"
				value="Reset"></td>
		</tr>
	</table>
</form:form>

______________________________________________
package com.ankit.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.jasper.tagplugins.jstl.core.ForEach;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


import com.ankit.entity.Student;

@Repository
public class StudentDAOImpl implements StudentDAO {
	@Autowired
	private SessionFactory sessionfactory;

	@Override
	public void addStudent(Student student) {
		// TODO Auto-generated method stub
		sessionfactory.getCurrentSession().saveOrUpdate(student);

	}
	
	

	@Override
	public void updateStudent(Student student) {
		// TODO Auto-generated method stub
		sessionfactory.getCurrentSession().update(student);

	}

	@Override
	public List<Student> listStudents() {
		// TODO Auto-generated method stub
		return (List<Student>) sessionfactory.getCurrentSession().createQuery("from Student").list();
	}

	@Override
	public Student getStudent(int id) {
		// TODO Auto-generated method stub

		return (Student) sessionfactory.getCurrentSession().get(Student.class, id);
	}

	@Override
	public void deleteStudent(int id) {
		// TODO Auto-generated method stub
		Student student = getStudent(id);

		sessionfactory.getCurrentSession().delete(student);
		/*Query q = sessionfactory.getCurrentSession().createQuery(" delete from Hobby where student =:n");
		q.setParameter("n", student);
		Query q1 = sessionfactory.getCurrentSession().createQuery(" delete from Skill where student =:p");
		q1.setParameter("p", student);
*/
	}



	@Override
	public int checkEmail(String s) {
		// TODO Auto-generated method stub
		int i=0;
		Query q = sessionfactory.getCurrentSession().createQuery("from Student");
		List<Student> l = q.list();
		for(Student g:l) {
			/*if(g.equals(s)){
				i++;
			}*/
			if(g.getTxtemail().equals(s)){
				i++;
				break;
			}
			
		}
		
		return i;
	}

	/*@Override
	public List<Hobby> getHobbies(int id) {
		// TODO Auto-generated method stub
		Student student = getStudent(id);
		Query q = sessionfactory.getCurrentSession().createQuery("select sportname from Hobby where student=:n");
		q.setParameter("n", student);
		List<Hobby> i = q.list();
		return i;
		// return (List<Hobby>)
		// sessionfactory.getCurrentSession().createQuery("from Hobby where
		// student_id=:n");

	}

	@Override
	public List<Skill> getSkills(int id) {
		// TODO Auto-generated method stub
		Student student = getStudent(id);
	  //  Map<Object, Object> j=new HashMap<>();
	  //  j.put("n", student);
		Query q = sessionfactory.getCurrentSession().createQuery("select skillname from Skill where student=:n");
		//q.setProperties(j);
		q.setParameter("n", student);
		List<Skill> i = q.list();
		for(Skill s:i)
			System.out.println(s.getSkillname());
		return i;
	}

	@Override
	public List<Student> findStudent(String email) {
		// TODO Auto-generated method stub
		Query q = sessionfactory.getCurrentSession().createQuery("from Student where email=:e");
		q.setParameter("e",email);
		List<Student> s = q.list();
		return s;
	}*/

}

	
+________________________________________
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
		
		<annotation-driven />
		
		<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/jsps/" />
		<beans:property name="suffix" value=".jsp" />
		</beans:bean>
		
		<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
		<beans:property name="url"
			value="jdbc:sqlserver://192.168.101.143:1440;databaseName=test_demo" />
		<beans:property name="username" value="ankit" />
		<beans:property name="password" value="a@s12345" />
	</beans:bean>
	
		<!-- Hibernate 5 SessionFactory Bean definition -->
	<beans:bean id="hibernate5AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.ankit.entity.Student</beans:value>
				<beans:value>com.ankit.entity.Hobby</beans:value>
				<beans:value>com.ankit.entity.Skill</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
			<beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<context:component-scan base-package="com.ankit" />
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate5AnnotatedSessionFactory" />
	</beans:bean>
	
	</beans:beans>
